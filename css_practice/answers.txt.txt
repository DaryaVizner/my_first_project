1. В чем разница между селектором по классу и по ID с точки зрения специфичности и возможности повторного использования?
 - Класс (.class) - специфичность 0,1,0, можно повторять. ID (#id) - специфичность 1,0,0, уникальный на странице.

2. Как работает каскад в CSS и в каком порядке применяются стили при конфликте правил?
 - !important
 - Специфичность селектора
 - Порядок в коде (последний приоритетнее)

3. Рассчитайте специфичность для селекторов:
 - ul li.important = 0,1,2 (1 класс + 2 элемента)
 - #site-title = 1,0,0 (1 ID)
 - .content > .featured-post = 0,2,0 (2 класса)
4. Какие свойства в CSS наследуются по умолчанию, а какие нет? Приведите по 3 примера каждого типа.
 - Наследуются: color, font-family, line-height
 - Не наследуются: background, border, margin

5. Как работает селектор > (дочерний селектор) и чем он отличается от селектора потомков (через пробел)?
 - A > B - только прямые потомки
 - A B - все потомки любого уровня

6. Для чего используются псевдоклассы :hover и :nth-child()? В каких практических задачах они могут пригодиться?
 - :hover - стили при наведении (кнопки, ссылки)
 - :nth-child() - выбор элементов по порядку (таблицы, списки)

7. Что делает правило !important и почему его следует использовать с осторожностью?
 - Принудительно применяет стиль, игнорируя каскад. Ломает естественный поток стилей.

8. Как псевдоэлементы ::before и ::after расширяют возможности CSS и какой контент они могут содержать?
 - Добавляют контент без HTML: текст, иконки, декоративные элементы. Используют свойство content.

9. В каком порядке браузер применяет CSS-правила при одинаковой специфичности селекторов?
 - Применяется последнее объявление в CSS-файле.

10. Как инструменты разработчика в браузере помогают анализировать и отлаживать CSS-код?
 - Просмотр примененных стилей
 - Анализ специфичности
 - Тестирование изменений в реальном времени
 - Отладка наследования

